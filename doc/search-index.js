var searchIndex = JSON.parse('{\
"ym_file_parser":{"doc":"YM-file parser and player helper.","t":"RRNNNNNDDEMLLLLLLMLLLLLLLMMLMMMLALLALLLLLMMLLLLLLLLMLLLFLLLLMLLLLLMLLLLLLLLLLLLLMLLLLDRRRRDDDRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSNSSSSSEDESNSNNNNNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["MAX_DD_SAMPLES","MFP_TIMER_FREQUENCY","Ym2","Ym3","Ym4","Ym5","Ym6","YmFrame","YmSong","YmVersion","author","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chipset_frequency","clock_frequency","clone","clone","clone","clone_into","clone_into","clone_into","comments","created","cursor","data","dd_samples","dd_samples_ends","default","effects","eq","equivalent","flags","fmt","fmt","fmt","fmt","frame_cycles","frame_frequency","frames","from","from","from","fx0","fx1","into","into","into","loop_frame","new","parse","parse_any","parse_file","parse_unpacked","produce_next_ay_frame","reset","sample_data_range","song_attrs","song_duration","tag","timer_divisor0","timer_divisor1","timer_interval","title","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","vol","with_frequency","with_meta","with_samples","DigiDrum","ENV_PER_COARSE_REG","ENV_PER_FINE_REG","ENV_REG","MIXER_REG","SidVoice","SinusSid","SyncBuzzer","VOL_A_REG","VOL_B_REG","VOL_C_REG","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_active","is_active","is_active","iter_frame","iter_frame","iter_frame","iter_frame","reset","start","start","start","start","stop","stop","stop","stop","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CHAN_A","CHAN_B","CHAN_C","CHAN_CONTROL_MASK","COARSE_PERIOD_MASK","DIGIDRUM_4BIT","DIGIDRUM_SIGNED","DigiDrum","FX_TYPE_DIGI_DRUM","FX_TYPE_MASK","FX_TYPE_SID_VOICE","FX_TYPE_SINUS_SID","FX_TYPE_SYNC_BUZZ","FxChannel","FxCtrlFlags","FxType","INTERLEAVED","Idle","MFP_TIMER_RESTART","RunOnA","RunOnB","RunOnC","SidVoice","SinusSid","SongAttributes","SyncBuzz","all","all","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","complement","complement","contains","contains","contains","contains","dd_channel","default","default","difference","difference","difference","difference","empty","empty","empty","empty","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_name","from_name","fx6_channel","hash","hash","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","into","into","into","into","into_iter","into_iter","is_4bit","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_interleaved","is_signed","iter","iter","iter","iter","iter_names","iter_names","iter_names","iter_names","not","not","partial_cmp","partial_cmp","remove","remove","remove","remove","set","set","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ts_channel","type_id","type_id","type_id","type_id","union","union","union","union"],"q":[[0,"ym_file_parser"],[85,"ym_file_parser::effects"],[160,"ym_file_parser::flags"]],"d":["","","","","","","","This type represent the state of the AY/YM chipset …","The <strong>YM</strong> music file.","","The song author.","","","","","","","The number of cycles per second of the AY/YM chipset clock.","Returns the AY/YM chipset clock frequency.","","","","","","","The comment.","The last modification timestamp of the YM-file from the …","Returns the current frame cursor value.","Frame data.","<code>DIGI-DRUM</code> samples.","<code>DIGI-DRUM</code> sample end indexes in YmSong::dd_samples.","","Special effects.","","","<code>YmSong</code> related flags.","","","","","Returns the number of AY/YM chipset clock cycles of a …","The number of frames played each second.","The AY/YM state frames.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns special effect control flags from the register 1.","Returns special effect control flags from the register 3.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The loop frame index.","Creates a new instance of <code>YmSong</code> from the given <code>frames</code> and …","Attempts to parse a compressed YM-file from the given …","Attempts to parse an YM-file that can be either compressed …","Attempts to parse an YM-file that can be either compressed …","Attempts to parse an uncompressed YM-file from the given …","Produces the changes to the AY/YM chipset registers for …","Resets the state of the player.","Returns the indicated sample data range in the …","The song attributes.","Returns the song duration.","The YM version identifier tag as a string (4 ascii …","Calculates the timer divsor for the special effect <code>fx0</code>.","Calculates the timer divsor for the special effect <code>fx1</code>.","Calculates the timer interval in clock cycles, from the …","The song title or a file name.","","","","","","","","","","","","","","YM-file version.","Returns the value of the volume register for the indicated …","Returns <code>YmSong</code> with the <code>chipset_frequency</code> and …","Returns <code>YmSong</code> with the <code>author</code> and <code>comments</code> set from the …","Returns <code>YmSong</code> with the <code>song_attrs</code>, <code>dd_samples</code> and …","The <code>DIGI-DRUM</code> effect modulates the channel’s volume …","","","","","The <code>SID voice</code> effect modulates the channel’s volume …","The <code>Sinus SID</code> effect modulates the channel’s volume, by …","The <code>Sync Buzzer</code> effect writes periodically into the AY/YM …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the channel number <code>[0, 2]</code> if an effect is active. …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Returns the tuple of the effect type and the channel …","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if <code>DIGI-DRUM</code> data was 4-bit.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if frame data was layed out interleaved.","Returns <code>true</code> if <code>DIGI-DRUM</code> data was signed.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","Returns the tuple of timer restart boolean and the channel …","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[0,0,3,3,3,3,3,0,0,0,1,3,1,4,3,1,4,1,1,3,1,4,3,1,4,1,1,1,4,1,1,4,0,3,3,0,3,3,1,4,1,1,1,3,1,4,4,4,3,1,4,1,1,1,1,0,1,1,1,1,1,1,3,4,4,1,1,3,1,4,3,3,1,4,3,1,4,3,1,4,1,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,34,35,36,33,34,35,36,34,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,9,9,9,9,9,31,31,39,9,9,9,9,9,0,0,0,31,38,9,38,38,38,39,39,0,39,31,31,9,9,31,9,31,9,31,9,31,9,31,31,31,9,9,9,31,9,31,9,38,39,31,9,38,39,31,9,38,39,31,9,38,39,31,9,31,9,31,31,9,9,31,31,9,9,9,31,9,31,31,9,9,31,31,9,9,38,39,31,9,38,39,31,9,31,9,38,39,31,31,31,31,31,9,9,9,9,9,38,38,39,39,31,9,31,31,9,9,31,31,31,9,9,9,31,31,9,9,31,9,31,31,9,9,9,31,9,31,31,9,9,31,31,9,9,31,31,9,9,38,39,31,9,31,9,31,31,31,9,9,31,31,9,9,31,31,31,31,9,9,31,31,9,9,31,9,31,9,31,31,9,9,31,31,9,9,31,9,31,9,31,31,9,9,38,39,31,9,31,31,9,9,38,39,31,9,38,39,31,9,9,38,39,31,9,31,31,9,9],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1,2],[3,3],[1,1],[4,4],[[]],[[]],[[]],0,0,[1,5],0,0,0,[[],4],0,[[3,3],6],[[],6],0,[[3,7],8],[[3,7],8],[[1,7],8],[[4,7],8],[1,2],0,0,[[]],[[]],[[]],[4,9],[4,9],[[]],[[]],[[]],0,[[3,[11,[[10,[4]]]],5,12,[14,[13]]],1],[15,[[16,[1]]]],[[[0,[15,17]],[18,[12]]],[[16,[1]]]],[[[20,[19]]],[[16,[1]]]],[[[0,[15,17]],[18,[12]]],[[16,[1]]]],[[1,21],6],[1],[[1,22],[[23,[22]]]],0,[1,24],[3,25],[4,[[14,[26]]]],[4,[[14,[26]]]],[[1,26],2],0,[[]],[[]],[[]],[[],12],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],28],[[],28],[[],28],0,[[4,29],29],[[1,5,30],1],[[1,12,12],1],[[1,31,[11,[[10,[29]]]],[32,[22]]],1],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[35,35],[36,36],[[]],[[]],[[]],[[]],[[],33],[[],34],[[],35],[[],36],[[33,7],8],[[34,7],8],[[35,7],8],[[36,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,6],[35,6],[36,6],[[33,2],[[14,[37]]]],[[34,2,29],[[14,[37]]]],[[35,2,29],[[14,[37]]]],[[36,2,29,[10,[29]],29],[[14,[37]]]],[34],[[33,29,2]],[[34,29,2]],[[35,29,2]],[[36,22,22,2]],[33],[34],[35],[36],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],31],[[],31],[[],9],[[],9],[[31,31],31],[[9,9],9],[[31,31]],[[9,9]],[[31,31],31],[[9,9],9],[[31,31]],[[9,9]],[31,5],[31,5],[31,5],[9,29],[9,29],[9,29],[[31,31],31],[[9,9],9],[[31,31]],[[9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,38],[39,39],[31,31],[9,9],[[]],[[]],[[]],[[]],[[31,31],40],[[9,9],40],[31,31],[31,31],[9,9],[9,9],[[31,31],6],[[31,31],6],[[9,9],6],[[9,9],6],[9,[[14,[29]]]],[[],31],[[],9],[[31,31],31],[[31,31],31],[[9,9],9],[[9,9],9],[[],31],[[],31],[[],9],[[],9],[[38,38],6],[[39,39],6],[[31,31],6],[[9,9],6],[[],6],[[],6],[[],6],[[],6],[[31,41]],[[9,41]],[[38,7],8],[[39,7],8],[[31,7],8],[[31,7],8],[[31,7],8],[[31,7],8],[[31,7],8],[[9,7],8],[[9,7],8],[[9,7],8],[[9,7],8],[[9,7],8],[[]],[9,38],[9,39],[[]],[[]],[[]],[5,[[14,[31]]]],[5,[[14,[31]]]],[29,[[14,[9]]]],[29,[[14,[9]]]],[5,31],[5,31],[5,31],[29,9],[29,9],[29,9],[5,31],[5,31],[29,9],[29,9],[41,31],[41,9],[25,[[14,[31]]]],[25,[[14,[31]]]],[25,[[14,[9]]]],[25,[[14,[9]]]],[9,14],[[31,42]],[[9,42]],[[31,31]],[[31,31]],[[9,9]],[[9,9]],[[31,31],31],[[31,31],31],[[9,9],9],[[9,9],9],[[31,31],6],[[31,31],6],[[9,9],6],[[9,9],6],[[]],[[]],[[]],[[]],[31],[9],[31,6],[31,6],[31,6],[9,6],[9,6],[31,6],[31,6],[9,6],[9,6],[31,6],[31,6],[31,[[43,[31]]]],[31,[[43,[31]]]],[9,[[43,[9]]]],[9,[[43,[9]]]],[31,[[44,[31]]]],[31,[[44,[31]]]],[9,[[44,[9]]]],[9,[[44,[9]]]],[31,31],[9,9],[[31,31],[[14,[40]]]],[[9,9],[[14,[40]]]],[[31,31]],[[31,31]],[[9,9]],[[9,9]],[[31,31,6]],[[31,31,6]],[[9,9,6]],[[9,9,6]],[[31,31],31],[[9,9],9],[[31,31]],[[9,9]],[[31,31],31],[[31,31],31],[[9,9],9],[[9,9],9],[[]],[[]],[[]],[[]],[[31,31]],[[31,31]],[[9,9]],[[9,9]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[9,14],[[],28],[[],28],[[],28],[[],28],[[31,31],31],[[31,31],31],[[9,9],9],[[9,9],9]],"c":[],"p":[[3,"YmSong"],[15,"f32"],[4,"YmVersion"],[3,"YmFrame"],[15,"u32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"FxCtrlFlags"],[15,"slice"],[3,"Box"],[3,"String"],[3,"NaiveDateTime"],[4,"Option"],[8,"Read"],[6,"Result"],[8,"Seek"],[8,"Into"],[3,"Path"],[8,"AsRef"],[8,"FnMut"],[15,"usize"],[3,"Range"],[3,"Duration"],[15,"str"],[3,"NonZeroU32"],[4,"Result"],[3,"TypeId"],[15,"u8"],[15,"u16"],[3,"SongAttributes"],[15,"array"],[3,"SyncBuzzer"],[3,"SidVoice"],[3,"SinusSid"],[3,"DigiDrum"],[8,"Iterator"],[4,"FxChannel"],[4,"FxType"],[4,"Ordering"],[8,"IntoIterator"],[8,"Hasher"],[3,"Iter"],[3,"IterNames"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
