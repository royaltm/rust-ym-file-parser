var searchIndex = JSON.parse('{\
"ym_file_parser":{"doc":"YM-file parser and player helper.","i":[[3,"YmSong","ym_file_parser","The YM music file.",null,null],[12,"version","","YM-file version.",0,null],[12,"created","","The last modification timestamp of the YM-file from the…",0,null],[12,"song_attrs","","The song attributes.",0,null],[12,"title","","The song title or a file name.",0,null],[12,"author","","The song author.",0,null],[12,"comments","","The comment.",0,null],[12,"chipset_frequency","","The number of cycles per second of the AY/YM chipset clock.",0,null],[12,"frame_frequency","","The number of frames played each second.",0,null],[12,"loop_frame","","The loop frame index.",0,null],[12,"frames","","The AY/YM state frames.",0,null],[12,"dd_samples","","`DIGI-DRUM` samples.",0,null],[12,"dd_samples_ends","","`DIGI-DRUM` sample end indexes in [YmSong::dd_samples].",0,null],[3,"YmFrame","","This type represent the state of the AY/YM chipset…",null,null],[12,"data","","Frame data.",1,null],[4,"YmVersion","","",null,null],[13,"Ym2","","",2,null],[13,"Ym3","","",2,null],[13,"Ym4","","",2,null],[13,"Ym5","","",2,null],[13,"Ym6","","",2,null],[5,"parse_file","","Attempts to parse an YM-file that can be either compressed…",null,[[["path",3],["asref",8]],[["ymsong",3],["result",6]]]],[11,"parse_any","","Attempts to parse an YM-file that can be either compressed…",0,[[["read",8],["seek",8],["string",3]],[["ymsong",3],["result",6]]]],[11,"parse_unpacked","","Attempts to parse an uncompressed YM-file from the given…",0,[[["read",8],["seek",8],["string",3]],[["ymsong",3],["result",6]]]],[11,"parse","","Attempts to parse a compressed YM-file from the given…",0,[[["read",8]],[["ymsong",3],["result",6]]]],[11,"reset","","Resets the state of the player.",0,[[]]],[11,"cursor","","Returns the current frame cursor value.",0,[[]]],[11,"produce_next_ay_frame","","Produces the changes to the AY/YM chipset registers for…",0,[[["fnmut",8]]]],[11,"new","","Creates a new instance of `YmSong` from the given `frames`…",0,[[["ymversion",4],["box",3],["string",3],["option",4],["naivedatetime",3]],["ymsong",3]]],[11,"with_meta","","Returns `YmSong` with the `author` and `comments` set from…",0,[[["string",3]],["ymsong",3]]],[11,"with_samples","","Returns `YmSong` with the `song_attrs`, `dd_samples` and…",0,[[["box",3],["songattributes",3]],["ymsong",3]]],[11,"with_frequency","","Returns `YmSong` with the `chipset_frequency` and…",0,[[],["ymsong",3]]],[11,"song_duration","","Returns the song duration.",0,[[],["duration",3]]],[11,"clock_frequency","","Returns the AY/YM chipset clock frequency.",0,[[]]],[11,"frame_cycles","","Returns the number of AY/YM chipset clock cycles of a…",0,[[]]],[11,"timer_interval","","Calculates the timer interval in clock cycles, from the…",0,[[["nonzerou32",3]]]],[11,"sample_data_range","","Returns the indicated sample data range in the…",0,[[],["range",3]]],[11,"fx0","","Returns special effect control flags from the register 1.",1,[[],["fxctrlflags",3]]],[11,"fx1","","Returns special effect control flags from the register 3.",1,[[],["fxctrlflags",3]]],[11,"vol","","Returns the value of the volume register for the indicated…",1,[[]]],[11,"timer_divisor0","","Calculates the timer divsor for the special effect `fx0`.",1,[[],[["nonzerou32",3],["option",4]]]],[11,"timer_divisor1","","Calculates the timer divsor for the special effect `fx1`.",1,[[],[["nonzerou32",3],["option",4]]]],[0,"flags","","`YmSong` related flags.",null,null],[3,"SongAttributes","ym_file_parser::flags","",null,null],[3,"FxCtrlFlags","","",null,null],[4,"FxChannel","","",null,null],[13,"Idle","","",3,null],[13,"RunOnA","","",3,null],[13,"RunOnB","","",3,null],[13,"RunOnC","","",3,null],[4,"FxType","","",null,null],[13,"SidVoice","","",4,null],[13,"DigiDrum","","",4,null],[13,"SinusSid","","",4,null],[13,"SyncBuzz","","",4,null],[0,"effects","ym_file_parser","Special effects.",null,null],[3,"SyncBuzzer","ym_file_parser::effects","The `Sync Buzzer` effect writes periodically into the…",null,null],[3,"SidVoice","","The `SID voice` effect modulates the channel\'s volume…",null,null],[3,"SinusSid","","The `Sinus SID` effect modulates the channel\'s volume, by…",null,null],[3,"DigiDrum","","The `DIGI-DRUM` effect modulates the channel\'s volume…",null,null],[17,"MIXER_REG","","",null,null],[17,"VOL_A_REG","","",null,null],[17,"VOL_B_REG","","",null,null],[17,"VOL_C_REG","","",null,null],[17,"ENV_PER_FINE_REG","","",null,null],[17,"ENV_PER_COARSE_REG","","",null,null],[17,"ENV_REG","","",null,null],[17,"MAX_DD_SAMPLES","ym_file_parser","",null,null],[17,"MFP_TIMER_FREQUENCY","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","ym_file_parser::flags","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","ym_file_parser::effects","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","ym_file_parser::flags","",3,[[["fxctrlflags",3]]]],[11,"from","","",4,[[["fxctrlflags",3]]]],[11,"extend","","",5,[[["intoiterator",8]]]],[11,"extend","","",6,[[["intoiterator",8]]]],[11,"clone","","",3,[[],["fxchannel",4]]],[11,"clone","","",4,[[],["fxtype",4]]],[11,"clone","","",5,[[],["songattributes",3]]],[11,"clone","","",6,[[],["fxctrlflags",3]]],[11,"clone","ym_file_parser::effects","",7,[[],["syncbuzzer",3]]],[11,"clone","","",8,[[],["sidvoice",3]]],[11,"clone","","",9,[[],["sinussid",3]]],[11,"clone","","",10,[[],["digidrum",3]]],[11,"clone","ym_file_parser","",2,[[],["ymversion",4]]],[11,"clone","","",0,[[],["ymsong",3]]],[11,"clone","","",1,[[],["ymframe",3]]],[11,"default","ym_file_parser::flags","",5,[[],["songattributes",3]]],[11,"default","","",6,[[],["fxctrlflags",3]]],[11,"default","ym_file_parser::effects","",7,[[],["syncbuzzer",3]]],[11,"default","","",8,[[],["sidvoice",3]]],[11,"default","","",9,[[],["sinussid",3]]],[11,"default","","",10,[[],["digidrum",3]]],[11,"default","ym_file_parser","",1,[[],["ymframe",3]]],[11,"cmp","ym_file_parser::flags","",5,[[["songattributes",3]],["ordering",4]]],[11,"cmp","","",6,[[["fxctrlflags",3]],["ordering",4]]],[11,"eq","","",3,[[["fxchannel",4]]]],[11,"eq","","",4,[[["fxtype",4]]]],[11,"eq","","",5,[[["songattributes",3]]]],[11,"ne","","",5,[[["songattributes",3]]]],[11,"eq","","",6,[[["fxctrlflags",3]]]],[11,"ne","","",6,[[["fxctrlflags",3]]]],[11,"eq","ym_file_parser","",2,[[["ymversion",4]]]],[11,"partial_cmp","ym_file_parser::flags","",5,[[["songattributes",3]],[["ordering",4],["option",4]]]],[11,"lt","","",5,[[["songattributes",3]]]],[11,"le","","",5,[[["songattributes",3]]]],[11,"gt","","",5,[[["songattributes",3]]]],[11,"ge","","",5,[[["songattributes",3]]]],[11,"partial_cmp","","",6,[[["fxctrlflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["fxctrlflags",3]]]],[11,"le","","",6,[[["fxctrlflags",3]]]],[11,"gt","","",6,[[["fxctrlflags",3]]]],[11,"ge","","",6,[[["fxctrlflags",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ym_file_parser::effects","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","ym_file_parser","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"sub","ym_file_parser::flags","Returns the set difference of the two sets of flags.",5,[[["songattributes",3]],["songattributes",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["fxctrlflags",3]],["fxctrlflags",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",5,[[["songattributes",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["fxctrlflags",3]]]],[11,"not","","Returns the complement of this set of flags.",5,[[],["songattributes",3]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["fxctrlflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["songattributes",3]],["songattributes",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["fxctrlflags",3]],["fxctrlflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["songattributes",3]],["songattributes",3]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["fxctrlflags",3]],["fxctrlflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",5,[[["songattributes",3]],["songattributes",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["fxctrlflags",3]],["fxctrlflags",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["songattributes",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["fxctrlflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["songattributes",3]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["fxctrlflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["songattributes",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["fxctrlflags",3]]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"from_iter","","",5,[[["intoiterator",8]],["songattributes",3]]],[11,"from_iter","","",6,[[["intoiterator",8]],["fxctrlflags",3]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[18,"INTERLEAVED","","",5,null],[18,"DIGIDRUM_SIGNED","","",5,null],[18,"DIGIDRUM_4BIT","","",5,null],[11,"empty","","Returns an empty set of flags",5,[[],["songattributes",3]]],[11,"all","","Returns the set containing all flags.",5,[[],["songattributes",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",5,[[],[["option",4],["songattributes",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",5,[[],["songattributes",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",5,[[],["songattributes",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",5,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",5,[[["songattributes",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",5,[[["songattributes",3]]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["songattributes",3]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["songattributes",3]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["songattributes",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",5,[[["songattributes",3]]]],[18,"COARSE_PERIOD_MASK","","",6,null],[18,"CHAN_CONTROL_MASK","","",6,null],[18,"CHAN_A","","",6,null],[18,"CHAN_B","","",6,null],[18,"CHAN_C","","",6,null],[18,"MFP_TIMER_RESTART","","",6,null],[18,"FX_TYPE_MASK","","",6,null],[18,"FX_TYPE_SID_VOICE","","",6,null],[18,"FX_TYPE_DIGI_DRUM","","",6,null],[18,"FX_TYPE_SINUS_SID","","",6,null],[18,"FX_TYPE_SYNC_BUZZ","","",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["fxctrlflags",3]]],[11,"all","","Returns the set containing all flags.",6,[[],["fxctrlflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[],[["option",4],["fxctrlflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[],["fxctrlflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[],["fxctrlflags",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["fxctrlflags",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["fxctrlflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["fxctrlflags",3]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["fxctrlflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["fxctrlflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["fxctrlflags",3]]]],[11,"is_interleaved","","Returns `true` if frame data was layed out interleaved.",5,[[]]],[11,"is_4bit","","Returns `true` if `DIGI-DRUM` data was 4-bit.",5,[[]]],[11,"is_signed","","Returns `true` if `DIGI-DRUM` data was signed.",5,[[]]],[11,"ts_channel","","Returns the tuple of timer restart boolean and the channel…",6,[[],["option",4]]],[11,"dd_channel","","Returns the channel number `[0, 2]` if an effect is…",6,[[],["option",4]]],[11,"fx6_channel","","Returns the tuple of the effect type and the channel…",6,[[],["option",4]]],[11,"stop","ym_file_parser::effects","",7,[[]]],[11,"start","","",7,[[]]],[11,"iter_frame","","",7,[[],["option",4]]],[11,"is_active","","",8,[[]]],[11,"stop","","",8,[[]]],[11,"reset","","",8,[[]]],[11,"start","","",8,[[]]],[11,"iter_frame","","",8,[[],["option",4]]],[11,"is_active","","",10,[[]]],[11,"stop","","",10,[[]]],[11,"start","","",10,[[]]],[11,"iter_frame","","",10,[[],["option",4]]],[11,"is_active","","",9,[[]]],[11,"stop","","",9,[[]]],[11,"start","","",9,[[]]],[11,"iter_frame","","",9,[[],["option",4]]]],"p":[[3,"YmSong"],[3,"YmFrame"],[4,"YmVersion"],[4,"FxChannel"],[4,"FxType"],[3,"SongAttributes"],[3,"FxCtrlFlags"],[3,"SyncBuzzer"],[3,"SidVoice"],[3,"SinusSid"],[3,"DigiDrum"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);